{
    "For each Entries": {
        "prefix": "foe",
        "body": [
            "for (const [key, val] of Object.entries($1)) {",
            "  $2",
            "}"
        ],
        "description": "Entries",
        "scope": "javascript,typescript,typescriptreact"
    },
    "Entries": {
        "prefix": "oe",
        "body": [
            "Object.entries($1).forEach(([key, value]) => {",
            "  $2",
            "})"
        ],
        "description": "Entries",
        "scope": "javascript,typescript,typescriptreact"
    },
    "New Promise with Async Body": {
        "body": [
            "new Promise((resolve, reject) => (async () => {",
            "    $0",
            "});"
        ],
        "description": "New Promise with Async Body",
        "prefix": "aprom",
        "scope": "javascript,typescript,typescriptreact"
    },
    "Wait": {
        "body": [
            "const wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms))",
            "",
            "$0"
        ],
        "description": "Wait for a few ms",
        "prefix": "wait",
        "scope": "javascript,typescript"
    },
    "Immediate": {
        "body": [
            "const setImmediatePromise = () => new Promise((resolve) => setImmediate(resolve))",
            "",
            "$0"
        ],
        "description": "Use setImmediate to yield the event loop",
        "prefix": "immediate",
        "scope": "javascript,typescript"
    },
    "Singleton": {
        "body": [
            "class $1 {",
            "    private static instance: $1;",
            "    private constructor() {",
            "        // do something construct...",
            "    }",
            "    static getInstance() {",
            "        if (!$1.instance) {",
            "            $1.instance = new $1();",
            "            // ... any one time initialization goes here ...",
            "        }",
            "        return $1.instance;",
            "    }",
            "    //someMethod() { }",
            "}"
        ],
        "description": "Create a typescript,typescriptreact singleton",
        "prefix": "singleton",
        "scope": "javascript,typescript,typescriptreact"
    },
    "Try Block": {
        "body": [
            "try {",
            "    $1",
            "} catch (err) {",
            "    console.log(err);",
            "}"
        ],
        "description": "Make a try/catch block",
        "prefix": "try",
        "scope": "javascript,typescript,typescriptreact"
    },
    "aco": {
        "body": [
            "(async (${1}) => {",
            "    $0",
            "})(${1}).catch((err) => {",
            "    console.error(err)",
            "});"
        ],
        "description": "Async coroutine",
        "prefix": "aco",
        "scope": "javascript,typescript,typescriptreact"
    },
    "afn": {
        "body": [
            "const $1 = async ($2) => {",
            "    $0",
            "};"
        ],
        "description": "Async Constant Function",
        "prefix": "afn",
        "scope": "javascript,typescript,typescriptreact"
    },
    "cfn": {
        "body": [
            "const $1 = ($2) => {",
            "    $0",
            "};"
        ],
        "description": "Constant Function",
        "prefix": "cfn",
        "scope": "javascript,typescript,typescriptreact"
    },
    "format": {
        "body": [
            "//@formatter:on"
        ],
        "description": "Restart IntelliJ auto-formatting code",
        "prefix": "format",
        "scope": "javascript,typescript,typescriptreact"
    },
    "ita": {
        "body": [
            "it('$1', async () => {",
            "  $2",
            "}); "
        ],
        "description": "Inserts it() block (async)",
        "prefix": "ita",
        "scope": "javascript,typescript,typescriptreact"
    },
    "itp": {
        "body": [
            "it.todo('$1');",
            "// it('$1', async function() {",
            "//   ",
            "// });",
            "",
            "$2"
        ],
        "description": "Inserts pending it block",
        "prefix": "itp",
        "scope": "javascript,typescript,typescriptreact"
    },
    "noformat": {
        "body": [
            "//@formatter:off"
        ],
        "description": "Disable IntelliJ auto-formatting beyond this line (use when you have single-line code to not be reformatted)",
        "prefix": "noformat",
        "scope": "javascript,typescript,typescriptreact"
    },
    "prom": {
        "body": [
            "return new Promise((resolve, reject) => (async () => {",
            "    $0",
            "});"
        ],
        "description": "Return a promise",
        "prefix": "prom",
        "scope": "javascript,typescript,typescriptreact"
    },
    "Create debug log": {
        "prefix": "rdebug",
        "body": [
            "import debug from \"debug\";",
            "const log = debug('$1:$TM_FILENAME_BASE');",
            ""
        ],
        "description": "Create debug log",
        "scope": "javascript,typescript,typescriptreact"
    }
}